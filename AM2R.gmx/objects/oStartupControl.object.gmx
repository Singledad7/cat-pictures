<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize async stuff.

enum LOADER_STATE {
    NOTHING,       // what
    MODIFIERS_INI, // modifiers.ini
    FONTSIZES_INI, // lang/sizes.ini
    PALETTESM_INI, // mods/palettes/metroids/config.ini
    CONFIGSAV_INI, // [savedata]/config.ini
    LANGUAGES_TXT, // languages.txt
    LANGUAGES_INI, // lang/[ini files]
    SAVEDATA,      // [savedata]/save[1;3] or data/extras.sav
    SAVING         // flushing savedata
};

nik_init_netlog();
global.path_sep = "/";
if (os_type == os_windows || os_type == os_winphone || os_type == os_uwp || os_type == os_win8native) {
    global.path_sep = "\";
}
global.crlf = chr(13) + chr(10); // 0d0a windows crlf.

state = LOADER_STATE.NOTHING;
bufmap = ds_map_create();
strmap = ds_map_create();
modifiers = "";
fontsizes = "";
configsav = "";
palettesm = "";

opid = -1;
retry = false;
start = false;
loadmsg = "hi, privet, guten tag, please DON'T mention this port#on AM2R sites (reddit/discord)##";

pads = array_create(gamepad_get_device_count());
pad = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm for extra measures.
writelog("Scheduled start...");
start = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if we need to retry.

if (retry &amp;&amp; state == LOADER_STATE.NOTHING &amp;&amp; room != room_first) {
    writelog("Retrying...");
    savedata_flush();
}

global.gamepadIndex = pad;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///detect pads at early boot.

var _event_type = string(async_load[? "event_type"]);
var _pad_index = async_load[? "pad_index"];
if (_event_type == "gamepad discovered") {
    pad = _pad_index;
    pads[pad] = true;
    writelog("Found pad at slot no." + string(pad));
}
else if (_event_type == "gamepad lost") {
    pads[_pad_index] = false;
    writelog("Lost pad at slot no." + string(_pad_index));
    
    if (pad == _pad_index) {
        var _found = false;
        for (var _i = 0; _i &lt; array_length_1d(pads); _i++) {
            if (pads[_i]) {
                _found = true;
                pad = _i;
                writelog("Rebound to pad at slot no." + string(_i));
                break;
            }
        }
        
        if (!_found) {
            writelog("All controllers are disconnected.");
            // switch
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle events from the system.

var _id = async_load[? "id"];
var _status = async_load[? "status"];

if (_id == opid) {
    switch (state) {
        case LOADER_STATE.MODIFIERS_INI: {
            var _p = "modifiers.ini";
            var _b = bufmap[? _p];
            var _s = buffer_read(_b, buffer_string);
            buffer_delete(_b);
            ds_map_clear(bufmap);
            modifiers = _s;
            loadmsg += "loaded modifiers.ini#";
            fontsizes_async_init();
            break;
        }
        
        case LOADER_STATE.FONTSIZES_INI: {
            var _p = path_combine("lang", "fonts", "sizes.ini");
            var _b = bufmap[? _p];
            var _s = buffer_read(_b, buffer_string);
            buffer_delete(_b);
            ds_map_clear(bufmap);
            fontsizes = _s;
            loadmsg += "loaded sizes.ini#";
            palettes_async_init();
            break;
        }
        
        case LOADER_STATE.PALETTESM_INI: {
            var _p = path_combine("mods", "palettes", "metroids", "config.ini");
            var _b = bufmap[? _p];
            var _s = buffer_read(_b, buffer_string);
            buffer_delete(_b);
            ds_map_clear(bufmap);
            palettesm = _s;
            loadmsg += "loaded palette config.ini#";
            config_async_init();
            break;
        }
        
        case LOADER_STATE.CONFIGSAV_INI: {
            var _p = "config.ini";
            var _b = bufmap[? _p];
            var _s = buffer_read(_b, buffer_string);
            buffer_delete(_b);
            ds_map_clear(bufmap);
            configsav = _s;
            loadmsg += "config.ini#";
            language_async_init();
            break;
        }
        
        case LOADER_STATE.LANGUAGES_TXT: {
            var _p = path_combine("lang", "languages.txt");
            var _b = bufmap[? _p];
            var _s = buffer_read(_b, buffer_string);
            buffer_delete(_b);
            ds_map_clear(bufmap);
            init_languages(_s);
            loadmsg += "languages.txt#";
            break;
        }
        
        case LOADER_STATE.LANGUAGES_INI: {
            for (var _k = ds_map_find_first(bufmap), _v;
                 !is_undefined(_k) &amp;&amp; ds_map_exists(bufmap, _k);
                 _k = ds_map_find_next(bufmap, _k)) {
                 
                 _v = bufmap[? _k];
                 var _vv = buffer_read(_v, buffer_string);
                 buffer_delete(_v);
                 global.language[strmap[? _k]] = _vv;
                 loadmsg += _k + ",";
            }
            loadmsg += "#";
            ds_map_clear(bufmap);
            ds_map_clear(strmap);
            savedata_async_init();
            break;
        }
        
        case LOADER_STATE.SAVEDATA: {
            for (var _k = ds_map_find_first(bufmap), _v;
                 !is_undefined(_k) &amp;&amp; ds_map_exists(bufmap, _k);
                 _k = ds_map_find_next(bufmap, _k)) {
                 
                 _v = bufmap[? _k];
                 writelog("bsize " + string(buffer_get_size(_v)));
                 if (buffer_get_size(_v) &gt; 1) {
                    crypt(_v, XOR_KEY, 2);
                    var _s = buffer_read(_v, buffer_string);
                    strmap[? _k] = _s;
                    loadmsg += _k + "#";
                 }
                 else {
                    writelog("Empty save file " + _k);
                 }
                 buffer_delete(_v);
            }
            ds_map_clear(bufmap);
            alarm[0] = 5*room_speed;
            state = LOADER_STATE.NOTHING;
            loadmsg += "will start the game...";
            break;
        }
        
        case LOADER_STATE.SAVING: {
            for (var _k = ds_map_find_first(bufmap), _v;
                 !is_undefined(_k) &amp;&amp; ds_map_exists(bufmap, _k);
                 _k = ds_map_find_next(bufmap, _k)) {
                 
                 _v = bufmap[? _k];
                 buffer_delete(_v);
                 writelog("Freed save file " + _k);
            }
            ds_map_clear(bufmap);
            state = LOADER_STATE.NOTHING;
            break;
        }
        
        default: {
            show_error("Unknown async loader state=" + string(state), true);
            break;
        }
    }
}
else {
    writelog("async id mismatch! is this a buffer event, and not a buffer GROUP event?");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///netlog_async_net();
netlog_async_net();
if (!once) {
    once = true;
    modifiers_async_init();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn game objects.

writelog("Preparing to launch game...");

with (instance_create(16, 16, oControl)) {
    event_perform(ev_other, ev_game_start);
    event_perform(ev_other, ev_room_start);
    surface_free(widescreen_surface);
}

with (instance_create(16, 32, oMusicV2)) {
    event_perform(ev_other, ev_room_start);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free netlog
nik_kill_netlog();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start the game in last event.

if (start) {
    start = false;
    event_user(15);
    visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_font(fontMenuSmallDefault);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);
draw_text_shadow(4, 4, loadmsg);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
